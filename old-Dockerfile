# # Use official Node.js image 
# FROM node:16-alpine

# # Set working directory
# WORKDIR /usr/src/app

# COPY package.json pnpm-lock.yaml ./

# # Install dependencies  
# RUN npm install -g pnpm  
# RUN pnpm install

# # Copy source files
# COPY . .

# # Expose port
# EXPOSE 4000  

# # Start app
# CMD ["pnpm", "start"]

# Install dependencies 
# FROM node:16-alpine AS build

# WORKDIR /usr/src/app
# COPY package.json pnpm-lock.yaml ./

# RUN npm i -g pnpm && pnpm install --prod

# COPY . .
# RUN pnpm build

# # Copy node_modules from deps stage
# FROM node:16-alpine AS production  

# WORKDIR /usr/src/app
# COPY --from=build /usr/src/app/node_modules ./node_modules
# COPY --from=build /usr/src/app/dist ./dist

# EXPOSE 4000

# CMD ["pnpm", "start"]






# FROM node:alpine AS development

# WORKDIR /usr/src/app

# COPY package.json pnpm-lock.yaml ./

# RUN npm install -g pnpm && pnpm install

# COPY . .

# RUN pnpm run build


# FROM node:alpine as production

# ARG NODE_ENV=production
# ENV NODE_ENV=${NODE_ENV} 

# WORKDIR /usr/src/app

# COPY package.json pnpm-lock.yaml ./

# RUN npm install -g pnpm && pnpm install --prod

# COPY . .

# COPY --from=development /usr/src/app/dist ./dist  

# CMD ["node", "dist/main"]


# FROM node:alpine AS development

# # Install pnpm
# RUN npm install -g pnpm

# WORKDIR /usr/src/app
# COPY package.json pnpm-lock.yaml ./ 
# RUN pnpm install

# COPY . .
# RUN pnpm run build


# FROM node:alpine as production

# ARG NODE_ENV=production
# ENV NODE_ENV=$NODE_ENV

# # Expose port  
# EXPOSE 3000

# # Add PostgreSQL client 
# RUN apk add --no-cache postgresql-client

# # Add Redis client
# RUN apk add --no-cache redis


# WORKDIR /usr/src/app 

# RUN touch dummyfile
# RUN ls -al /usr/src/app

# COPY --from=development /usr/src/app/dist ./dist

# CMD ["node", "main"]



# Development Stage
FROM node:alpine AS development

WORKDIR /usr/src/app

# Copy only necessary files for npm install to leverage Docker layer caching
COPY package.json pnpm-lock.yaml ./

# Install pnpm globally
RUN npm install -g pnpm

# Install dependencies for development
RUN pnpm install

# Copy the entire project for development
COPY . .

# Build your application for development
RUN pnpm run build

# Production Stage
FROM node:alpine as production

ARG NODE_ENV=production
ENV NODE_ENV=$NODE_ENV

WORKDIR /usr/src/app

# Copy only necessary files for npm install to leverage Docker layer caching
COPY package.json pnpm-lock.yaml ./

RUN npm install -g pnpm

# Install only production dependencies
RUN pnpm install --prod

# Copy the .env file for both development and production
COPY .env .env

# Copy the application files

# Copy the built files from the development stage
COPY --from=development /usr/src/app/dist ./dist

COPY . .

# Expose the application port
EXPOSE 4000

# Set a default command for production
CMD ["node", "dist/main"]
