generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  // shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

model contracts {
  id     Int    @id
  userId Int
  user   users? @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  type   String @default("agreement") @db.VarChar(100)
}

model deed_of_assignments {
  id                   Int     @id @default(autoincrement())
  donor_name           String  @db.VarChar(100)
  donor_address        String  @db.VarChar(100)
  donee_name           String  @db.VarChar(100)
  donee_address        String  @db.VarChar(100)
  type                 String  @default("agreement") @db.VarChar(100)
  property_description String?
  relevant_documents   String[]
  userId               Int
  user                 users?  @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model leases {
  id          Int    @id @default(autoincrement())
  leasor_name String @db.VarChar(100)
  leasee_name String @db.VarChar(100)
  userId      Int
  user        users? @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  type        String @default("agreement") @db.VarChar(100)
}

model loans {
  id            Int    @id @default(autoincrement())
  borrower_name String @db.VarChar(100)
  lender_name   String @db.VarChar(100)
  type          String @default("agreement") @db.VarChar(100)
  userId        Int
  user          users? @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model power_of_attorneys {
  id                   Int     @id @default(autoincrement())
  assignor_name        String  @db.VarChar(100)
  assignor_address     String  @db.VarChar(100)
  assignee_name        String  @db.VarChar(100)
  assignee_address     String  @db.VarChar(100)
  property_description String?
  relevant_documents   String[]
  type                 String  @default("agreement") @db.VarChar(100)
  userId               Int
  user                 users?  @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model sales {
  id                   Int      @id @default(autoincrement())
  vendor_name          String   @db.VarChar(100)
  purchaser_name       String   @db.VarChar(100)
  property_description String?
  amount               Decimal? @db.Decimal(10, 2)
  type                 String   @default("agreement") @db.VarChar(100)
  relevant_documents   String[]
  userId               Int
  user                 users?   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model tenants {
  id                   Int     @id @default(autoincrement())
  landlord_name        String  @db.VarChar(100)
  landlord_address     String  @db.VarChar(100)
  tenant_name          String  @db.VarChar(100)
  tenant_address       String  @db.VarChar(100)
  property_description String?
  type                 String  @default("agreement") @db.VarChar(100)
  amount               Decimal @db.Decimal(10, 2)
  duration             String  @db.VarChar(100)
  relevant_documents   String[]
  userId               Int
  user                 users?  @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model users {
  id                  Int                   @id @default(autoincrement())
  email               String                @unique @db.VarChar(50)
  password            String                @db.VarChar(200)
  created_at          DateTime?             @default(now()) @db.Timestamp(6)
  contracts           contracts[]
  deed_of_assignments deed_of_assignments[]
  power_of_attorneys  power_of_attorneys[]
  sales               sales[]
  tenants             tenants[]
  leases              leases[]
  loans               loans[]
}
