generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "postgresql"
  url               = env("PROD_DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

enum Status {
  pending
  approved
}

enum Role {
  superAdmin
  customer
}

model contract {
  id     Int    @id
  userId Int
  type   String @default("agreement") @db.VarChar(100)
  status Status @default(pending)
  user   user   @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model deed_of_assignment {
  id                   Int      @id @default(autoincrement())
  donor_name           String   @db.VarChar(100)
  donor_address        String   @db.VarChar(100)
  donee_name           String   @db.VarChar(100)
  donee_address        String   @db.VarChar(100)
  type                 String   @default("agreement") @db.VarChar(100)
  property_description String?
  relevant_documents   String[]
  created_at           DateTime @default(now()) @db.Timestamp(6)
  updated_at           DateTime @updatedAt
  userId               Int
  status               Status   @default(pending)
  user                 user     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model lease {
  id          Int    @id @default(autoincrement())
  leasor_name String @db.VarChar(100)
  leasee_name String @db.VarChar(100)
  type        String @default("agreement") @db.VarChar(100)
  userId      Int
  status      Status @default(pending)
  user        user   @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model loan {
  id            Int    @id @default(autoincrement())
  borrower_name String @db.VarChar(100)
  lender_name   String @db.VarChar(100)
  type          String @default("agreement") @db.VarChar(100)
  userId        Int
  amount        Decimal
  interestRate  Int    @default(1)
  status        Status @default(pending)
  user          user   @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model power_of_attorney {
  id                   Int      @id @default(autoincrement())
  assignor_name        String   @db.VarChar(100)
  assignor_address     String   @db.VarChar(100)
  assignee_name        String   @db.VarChar(100)
  assignee_address     String   @db.VarChar(100)
  property_description String?
  relevant_documents   String[]
  created_at           DateTime @default(now()) @db.Timestamp(6)
  updated_at           DateTime @updatedAt
  type                 String   @default("agreement") @db.VarChar(100)
  userId               Int
  status               Status   @default(pending)
  user                 user     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model sale {
  id                   Int      @id @default(autoincrement())
  vendor_name          String   @db.VarChar(100)
  purchaser_name       String   @db.VarChar(100)
  property_description String?
  amount               Decimal? @db.Decimal(10, 2)
  type                 String   @default("agreement") @db.VarChar(100)
  relevant_documents   String[]
  created_at           DateTime @default(now()) @db.Timestamp(6)
  updated_at           DateTime @updatedAt
  userId               Int
  status               Status   @default(pending)
  user                 user     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model tenancy {
  id                   Int      @id @default(autoincrement())
  landlord_name        String   @db.VarChar(100)
  landlord_address     String   @db.VarChar(100)
  tenant_name          String   @db.VarChar(100)
  tenant_address       String   @db.VarChar(100)
  property_description String?
  type                 String   @default("agreement") @db.VarChar(100)
  amount               Decimal  @db.Decimal(10, 2)
  duration             String   @db.VarChar(100)
  relevant_documents   String[]
  created_at           DateTime @default(now()) @db.Timestamp(6)
  updated_at           DateTime @updatedAt
  userId               Int
  status               Status   @default(pending)
  user                 user     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model user {
  id                 Int                  @id @default(autoincrement())
  email              String               @unique @db.VarChar(50)
  hashedPassword     String?              @db.VarChar(200)
  firstName          String               @db.VarChar(200)
  lastName           String               @db.VarChar(200)
  role               Role                 @default(customer)
  created_at         DateTime             @default(now()) @db.Timestamp(6)
  updated_at         DateTime             @updatedAt
  account            account[]
  contract           contract[]
  deed_of_assignment deed_of_assignment[]
  lease              lease[]
  loan               loan[]
  power_of_attorney  power_of_attorney[]
  sale               sale[]
  tenancy            tenancy[]
}

model account {
  id             Int      @id @default(autoincrement())
  userId         Int
  type           String
  provider       String?
  providerUserId String?
  refresh_token  String?
  access_token   String?
  expires_at     Int?
  token_type     String?
  scope          String?
  id_token       String?
  session_state  String?
  created_at     DateTime @default(now()) @db.Timestamp(6)
  updated_at     DateTime @updatedAt
  user           user     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@unique([provider, providerUserId])
}
