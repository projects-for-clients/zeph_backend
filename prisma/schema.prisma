generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model agreements {
  id                 Int                  @id @default(autoincrement())
  created_at         DateTime?            @default(now()) @db.Timestamp(6)
  user_id            Int?
  users              users?               @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  contract_agreement contract_agreement[]
  deed_of_assignment deed_of_assignment[]
  lease_agreement    lease_agreement[]
  loan_agreement     loan_agreement[]
  power_of_attorney  power_of_attorney[]
  sales_agreement    sales_agreement[]
  tenancy            tenancy[]
}

model contract_agreement {
  id           Int         @id @default(autoincrement())
  agreement_id Int?
  agreements   agreements? @relation(fields: [agreement_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model deed_of_assignment {
  id                   Int         @id @default(autoincrement())
  donor_name           String      @db.VarChar(100)
  donor_address        String      @db.VarChar(100)
  donee_name           String      @db.VarChar(100)
  donee_address        String      @db.VarChar(100)
  property_description String?
  relevant_documents   String?
  agreement_id         Int?
  agreements           agreements? @relation(fields: [agreement_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model lease_agreement {
  id           Int         @id @default(autoincrement())
  leasor_name  String      @db.VarChar(100)
  leasee_name  String      @db.VarChar(100)
  agreement_id Int?
  agreements   agreements? @relation(fields: [agreement_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model loan_agreement {
  id            Int         @id @default(autoincrement())
  borrower_name String      @db.VarChar(100)
  lender_name   String      @db.VarChar(100)
  agreement_id  Int?
  agreements    agreements? @relation(fields: [agreement_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model power_of_attorney {
  id                   Int         @id @default(autoincrement())
  assignor_name        String      @db.VarChar(100)
  assignor_address     String      @db.VarChar(100)
  assignee_name        String      @db.VarChar(100)
  assignee_address     String      @db.VarChar(100)
  property_description String?
  relevant_documents   String?
  agreement_id         Int?
  agreements           agreements? @relation(fields: [agreement_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model sales_agreement {
  id                   Int         @id @default(autoincrement())
  vendor_name          String      @db.VarChar(100)
  purchaser_name       String      @db.VarChar(100)
  property_description String?
  amount               Decimal?    @db.Decimal(10, 2)
  relevant_documents   String?
  agreement_id         Int?
  agreements           agreements? @relation(fields: [agreement_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model tenancy {
  id                   Int                      @id @default(autoincrement())
  landlord_name        String                   @db.VarChar(100)
  landlord_address     String                   @db.VarChar(100)
  tenant_name          String                   @db.VarChar(100)
  tenant_address       String                   @db.VarChar(100)
  property_description String?
  amount               Decimal?                 @db.Decimal(10, 2)
  duration             String                   @db.VarChar(100)
  relevant_documents   String?
  agreement_id         Int?
  agreements           agreements?              @relation(fields: [agreement_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model users {
  id         Int          @id @default(autoincrement())
  firstname  String       @db.VarChar(50)
  lastname   String       @db.VarChar(50)
  password   String       @db.VarChar(50)
  created_at DateTime?    @default(now()) @db.Timestamp(6)
  agreements agreements[]
}
